// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  role     UserRole @default(STUDENT)

  questions Question[]
  answers   Answer[]
  comments  Comment[]

  @@map("users")
}

model Question {
  id           String       @id @default(uuid())
  title        String
  slug         String       @unique
  content      String
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime?    @updatedAt @map("updated_at")
  bestAnswerId String?      @unique @map("best_answer_id")
  authorId     String       @map("author_id")
  comments     Comment[]
  attachments  Attachment[]

  bestAnswer Answer?  @relation("BestAnswer", fields: [bestAnswerId], references: [id])
  author     User     @relation(fields: [authorId], references: [id])
  answers    Answer[]

  @@map("questions")
}

model Answer {
  id          String       @id @default(uuid())
  content     String
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?    @updatedAt @map("updated_at")
  questionId  String       @map("question_id")
  authorId    String       @map("author_id")
  comments    Comment[]
  attachments Attachment[]

  bestAnswerOn Question? @relation("BestAnswer")
  question     Question  @relation(fields: [questionId], references: [id])
  author       User      @relation(fields: [authorId], references: [id])

  @@map("answers")
}

model Comment {
  id         String    @id @default(uuid())
  content    String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  authorId   String    @map("author_id")
  questionId String?   @map("question_id")
  answerId   String?   @map("answer_id")

  aithor   User      @relation(fields: [authorId], references: [id])
  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])

  @@map("comments")
}

model Attachment {
  id         String  @id @default(uuid())
  title      String
  url        String
  questionId String? @map("question_id")
  answerId   String? @map("answer_id")

  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])

  @@map("attachments")
}
